/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _OAUTH_H_RPCGEN
#define _OAUTH_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct requestTokenAcces {
	char *user_id;
	char *token;
	int type;
};
typedef struct requestTokenAcces requestTokenAcces;

struct returnRequestTokenAcces {
	char *tokenAcces;
	char *tokenRegen;
	int period;
};
typedef struct returnRequestTokenAcces returnRequestTokenAcces;

struct validateDelegatedAction {
	char *tipOperatie;
	char *resursa;
	char *token;
};
typedef struct validateDelegatedAction validateDelegatedAction;

enum AuthResult {
	PERMISSION_GRANTED = 0,
	PERMISSION_DENIED = 1,
	TOKEN_EXPIRED = 2,
	USER_NOT_FOUND = 3,
	REQUEST_DENIED = 4,
	RESOURCE_NOT_FOUND = 5,
	OPERATION_NOT_PERMITTED = 6,
};
typedef enum AuthResult AuthResult;

struct gatAndHandelTtl {
	char *token;
	int ttl;
};
typedef struct gatAndHandelTtl gatAndHandelTtl;

#define OAUTH 0x20000001
#define OAUTH_V1 1

#if defined(__STDC__) || defined(__cplusplus)
#define REQUEST_AUTHORIZATION 1
extern  char ** request_authorization_1(char **, CLIENT *);
extern  char ** request_authorization_1_svc(char **, struct svc_req *);
#define REQUEST_AUTHORIZATION_TOKEN 2
extern  returnRequestTokenAcces * request_authorization_token_1(requestTokenAcces *, CLIENT *);
extern  returnRequestTokenAcces * request_authorization_token_1_svc(requestTokenAcces *, struct svc_req *);
#define VALIDATE_DELEGATED_ACTION 3
extern  enum AuthResult * validate_delegated_action_1(validateDelegatedAction *, CLIENT *);
extern  enum AuthResult * validate_delegated_action_1_svc(validateDelegatedAction *, struct svc_req *);
#define APPROVE_REQUEST_TOKEN 4
extern  char ** approve_request_token_1(char **, CLIENT *);
extern  char ** approve_request_token_1_svc(char **, struct svc_req *);
#define GET_ACCES_TOKEN_AND_HANDEL_TTL 5
extern  gatAndHandelTtl * get_acces_token_and_handel_ttl_1(char **, CLIENT *);
extern  gatAndHandelTtl * get_acces_token_and_handel_ttl_1_svc(char **, struct svc_req *);
#define INCREASE_COUNT 6
extern  int * increase_count_1(void *, CLIENT *);
extern  int * increase_count_1_svc(void *, struct svc_req *);
extern int oauth_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define REQUEST_AUTHORIZATION 1
extern  char ** request_authorization_1();
extern  char ** request_authorization_1_svc();
#define REQUEST_AUTHORIZATION_TOKEN 2
extern  returnRequestTokenAcces * request_authorization_token_1();
extern  returnRequestTokenAcces * request_authorization_token_1_svc();
#define VALIDATE_DELEGATED_ACTION 3
extern  enum AuthResult * validate_delegated_action_1();
extern  enum AuthResult * validate_delegated_action_1_svc();
#define APPROVE_REQUEST_TOKEN 4
extern  char ** approve_request_token_1();
extern  char ** approve_request_token_1_svc();
#define GET_ACCES_TOKEN_AND_HANDEL_TTL 5
extern  gatAndHandelTtl * get_acces_token_and_handel_ttl_1();
extern  gatAndHandelTtl * get_acces_token_and_handel_ttl_1_svc();
#define INCREASE_COUNT 6
extern  int * increase_count_1();
extern  int * increase_count_1_svc();
extern int oauth_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_requestTokenAcces (XDR *, requestTokenAcces*);
extern  bool_t xdr_returnRequestTokenAcces (XDR *, returnRequestTokenAcces*);
extern  bool_t xdr_validateDelegatedAction (XDR *, validateDelegatedAction*);
extern  bool_t xdr_AuthResult (XDR *, AuthResult*);
extern  bool_t xdr_gatAndHandelTtl (XDR *, gatAndHandelTtl*);

#else /* K&R C */
extern bool_t xdr_requestTokenAcces ();
extern bool_t xdr_returnRequestTokenAcces ();
extern bool_t xdr_validateDelegatedAction ();
extern bool_t xdr_AuthResult ();
extern bool_t xdr_gatAndHandelTtl ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_OAUTH_H_RPCGEN */
